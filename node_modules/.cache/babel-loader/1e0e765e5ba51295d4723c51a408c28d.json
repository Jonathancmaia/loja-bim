{"ast":null,"code":"import { actionTypes } from '../actions/cart.action';\nconst initialState = {\n  ITEMS: []\n};\nexport default ((state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case actionTypes.ADD_ITEM:\n      let items = state.ITEMS.findIndex(item => item.id == payload.id);\n\n      if (items < 0) {\n        items.push({\n          id: payload.id,\n          qtd: payload.qtd\n        });\n      } else {\n        items.splice(items, 1);\n      }\n\n      return { ...state,\n        ITEMS: [...state.ITEMS, items]\n      };\n\n    case actionTypes.REMOVE_ITEM:\n      state.ITEMS.map(item => {\n        if (item.id === payload.id) {\n          return false;\n        } else {\n          return true;\n        }\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/laragon/www/loja-bim/src/store/reducers/cart.reducer.js"],"names":["actionTypes","initialState","ITEMS","state","type","payload","ADD_ITEM","items","findIndex","item","id","push","qtd","splice","REMOVE_ITEM","map"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuB;AAACG,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAvB,KAA2C;AACxD,UAAQD,IAAR;AAEE,SAAKJ,WAAW,CAACM,QAAjB;AACE,UAAIC,KAAK,GAAGJ,KAAK,CAACD,KAAN,CAAYM,SAAZ,CAAuBC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWL,OAAO,CAACK,EAAlD,CAAZ;;AAEA,UAAGH,KAAK,GAAG,CAAX,EAAc;AACZA,QAAAA,KAAK,CAACI,IAAN,CAAW;AAACD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EAAb;AAAiBE,UAAAA,GAAG,EAAEP,OAAO,CAACO;AAA9B,SAAX;AACD,OAFD,MAEO;AACLL,QAAAA,KAAK,CAACM,MAAN,CAAaN,KAAb,EAAoB,CAApB;AACD;;AAEA,aAAO,EAAC,GAAGJ,KAAJ;AAAWD,QAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACD,KAAV,EAAiBK,KAAjB;AAAlB,OAAP;;AAGH,SAAKP,WAAW,CAACc,WAAjB;AACEX,MAAAA,KAAK,CAACD,KAAN,CAAYa,GAAZ,CAAkBN,IAAD,IAAU;AACzB,YAAIA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAAxB,EAA2B;AACzB,iBAAO,KAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF,OAND;;AAQF;AACE,aAAOP,KAAP;AAxBJ;AA0BD,CA3BD","sourcesContent":["import { actionTypes } from '../actions/cart.action';\r\n\r\nconst initialState = {\r\n  ITEMS: []\r\n}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n  switch (type){\r\n\r\n    case actionTypes.ADD_ITEM:\r\n      let items = state.ITEMS.findIndex( item => item.id == payload.id );\r\n\r\n      if(items < 0) {\r\n        items.push({id: payload.id, qtd: payload.qtd});\r\n      } else {\r\n        items.splice(items, 1);\r\n      }\r\n\r\n       return {...state, ITEMS: [...state.ITEMS, items]}\r\n    \r\n\r\n    case actionTypes.REMOVE_ITEM:\r\n      state.ITEMS.map( (item) => {\r\n        if (item.id === payload.id){\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n\r\n    default:\r\n      return state\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}