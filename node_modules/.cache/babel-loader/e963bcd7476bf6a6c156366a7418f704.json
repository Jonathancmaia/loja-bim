{"ast":null,"code":"import { Http } from '../../config/Http';\nimport { changeLoading } from './loading.action';\nimport { changeNotify } from './notify.action';\nimport { useDispatch, useSelector } from 'react-redux';\nexport const actionTypes = {\n  CHANGE: 'CHANGE_AUTH',\n  SUCCESS: 'SUCCESS_AUTH'\n};\nexport const changeAuth = data => ({\n  type: actionTypes.CHANGE,\n  data\n});\nexport const successAuth = data => ({\n  type: actionTypes.SUCCESS,\n  data\n});\nexport const SetUserToken = token => dispatch => {\n  localStorage.setItem('access_token', token);\n  console.log(dispatch(changeAuth({\n    email: '',\n    password: ''\n  })));\n  dispatch(successAuth(true));\n};\nexport const loginAuth = credentials => dispatch => {\n  dispatch(changeLoading({\n    open: true,\n    msg: 'Autenticndo usuário...'\n  }));\n  return Http.post('/login', {\n    email: credentials.email,\n    password: credentials.password\n  }).then(response => {\n    if (typeof response !== 'undefined') {\n      if (response.data.access_token) {\n        dispatch(changeLoading({\n          open: false\n        }));\n        dispatch(SetUserToken(response.data.access_token));\n      }\n    }\n  }).catch(error => {\n    if (typeof error.response !== 'undefined') {\n      if (error.response.status === 401 || error.response.status === 400) {\n        dispatch(changeLoading({\n          open: false\n        }));\n        dispatch(changeNotify({\n          open: true,\n          class: 'error',\n          msg: 'Email e/ou senha incorretos'\n        }));\n      }\n    } else {\n      dispatch(changeLoading({\n        open: false\n      }));\n      dispatch(changeNotify({\n        open: true,\n        class: 'error',\n        msg: 'Erro o se conectar ao servidor'\n      }));\n    }\n  });\n};","map":{"version":3,"sources":["C:/laragon/www/loja-bim/src/store/actions/auth.action.js"],"names":["Http","changeLoading","changeNotify","useDispatch","useSelector","actionTypes","CHANGE","SUCCESS","changeAuth","data","type","successAuth","SetUserToken","token","dispatch","localStorage","setItem","console","log","email","password","loginAuth","credentials","open","msg","post","then","response","access_token","catch","error","status","class"],"mappings":"AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,aADiB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAIC,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,WAAW,CAACC,MADiB;AAEnCG,EAAAA;AAFmC,CAAX,CAAnB;AAKP,OAAO,MAAME,WAAW,GAAIF,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAEL,WAAW,CAACE,OADkB;AAEpCE,EAAAA;AAFoC,CAAX,CAApB;AAKP,OAAO,MAAMG,YAAY,GAAGC,KAAK,IAAIC,QAAQ,IAAI;AAE/CC,EAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCH,KAArC;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAAEN,UAAU,CAAC;AAC/BW,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,QAAQ,EAAE;AAFqB,GAAD,CAAZ,CAApB;AAKAN,EAAAA,QAAQ,CAAEH,WAAW,CAAC,IAAD,CAAb,CAAR;AACD,CAVM;AAYP,OAAO,MAAMU,SAAS,GAAGC,WAAW,IAAIR,QAAQ,IAAI;AAElDA,EAAAA,QAAQ,CAACb,aAAa,CAAC;AACrBsB,IAAAA,IAAI,EAAE,IADe;AAErBC,IAAAA,GAAG,EAAE;AAFgB,GAAD,CAAd,CAAR;AAKA,SAAOxB,IAAI,CAACyB,IAAL,CAAU,QAAV,EAAoB;AACzBN,IAAAA,KAAK,EAAEG,WAAW,CAACH,KADM;AAEzBC,IAAAA,QAAQ,EAAEE,WAAW,CAACF;AAFG,GAApB,EAGJM,IAHI,CAGGC,QAAD,IAAY;AACnB,QAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAoC;AAClC,UAAGA,QAAQ,CAAClB,IAAT,CAAcmB,YAAjB,EAA8B;AAC5Bd,QAAAA,QAAQ,CAAEb,aAAa,CAAC;AAAEsB,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAf,CAAR;AACAT,QAAAA,QAAQ,CAAGF,YAAY,CAACe,QAAQ,CAAClB,IAAT,CAAcmB,YAAf,CAAf,CAAR;AACD;AACF;AACF,GAVM,EAUJC,KAVI,CAUEC,KAAK,IAAI;AAChB,QAAI,OAAOA,KAAK,CAACH,QAAb,KAA0B,WAA9B,EAA0C;AACxC,UAAIG,KAAK,CAACH,QAAN,CAAeI,MAAf,KAA0B,GAA1B,IAAiCD,KAAK,CAACH,QAAN,CAAeI,MAAf,KAA0B,GAA/D,EAAmE;AACjEjB,QAAAA,QAAQ,CAAEb,aAAa,CAAC;AAAEsB,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAf,CAAR;AACAT,QAAAA,QAAQ,CAAEZ,YAAY,CAAC;AACrBqB,UAAAA,IAAI,EAAE,IADe;AAErBS,UAAAA,KAAK,EAAE,OAFc;AAGrBR,UAAAA,GAAG,EAAE;AAHgB,SAAD,CAAd,CAAR;AAKD;AACF,KATD,MASO;AACLV,MAAAA,QAAQ,CAAEb,aAAa,CAAC;AAAEsB,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAf,CAAR;AACET,MAAAA,QAAQ,CAAEZ,YAAY,CAAC;AACrBqB,QAAAA,IAAI,EAAE,IADe;AAErBS,QAAAA,KAAK,EAAE,OAFc;AAGrBR,QAAAA,GAAG,EAAE;AAHgB,OAAD,CAAd,CAAR;AAKH;AACF,GA5BM,CAAP;AA6BD,CApCM","sourcesContent":["import { Http } from '../../config/Http';\r\nimport { changeLoading } from './loading.action';\r\nimport { changeNotify } from './notify.action';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport const actionTypes = {\r\n  CHANGE: 'CHANGE_AUTH',\r\n  SUCCESS: 'SUCCESS_AUTH'\r\n}\r\n\r\nexport const changeAuth = (data) => ({\r\n  type: actionTypes.CHANGE,\r\n  data,\r\n})\r\n\r\nexport const successAuth = (data) => ({\r\n  type: actionTypes.SUCCESS,\r\n  data,\r\n})\r\n\r\nexport const SetUserToken = token => dispatch => {\r\n\r\n  localStorage.setItem('access_token', token);\r\n\r\n  console.log(dispatch( changeAuth({\r\n    email: '',\r\n    password: ''\r\n  }) ))\r\n\r\n  dispatch( successAuth(true) )\r\n}\r\n\r\nexport const loginAuth = credentials => dispatch => {\r\n\r\n  dispatch(changeLoading({\r\n    open: true,\r\n    msg: 'Autenticndo usuário...'\r\n  }))\r\n\r\n  return Http.post('/login', {\r\n    email: credentials.email,\r\n    password: credentials.password\r\n  }).then( (response)=>{\r\n    if (typeof response !== 'undefined'){\r\n      if(response.data.access_token){\r\n        dispatch( changeLoading({ open: false }) );\r\n        dispatch ( SetUserToken(response.data.access_token) );\r\n      }\r\n    }\r\n  }).catch(error => {\r\n    if (typeof error.response !== 'undefined'){\r\n      if (error.response.status === 401 || error.response.status === 400){\r\n        dispatch( changeLoading({ open: false }));\r\n        dispatch( changeNotify({\r\n          open: true,\r\n          class: 'error',\r\n          msg: 'Email e/ou senha incorretos'\r\n        }));\r\n      }\r\n    } else {\r\n      dispatch( changeLoading({ open: false }));\r\n        dispatch( changeNotify({\r\n          open: true,\r\n          class: 'error',\r\n          msg: 'Erro o se conectar ao servidor'\r\n        }));\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}