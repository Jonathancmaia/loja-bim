{"ast":null,"code":"import { actionTypes } from '../actions/cart.action';\nconst initialState = {\n  ITEMS: []\n};\nexport default ((state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case actionTypes.ADD_ITEM:\n      let arr_items = state.ITEMS;\n      let items = state.ITEMS.findIndex(item => item.id == payload.id);\n\n      if (items < 0) {\n        arr_items.push({\n          id: payload.id,\n          qtd: payload.qtd\n        });\n      } else {\n        arr_items.push({\n          id: payload.id,\n          qtd: state.ITEMS[items].qtd + 1\n        });\n        arr_items.splice(items, 1);\n      }\n\n      return { ...state,\n        ITEMS: arr_items\n      };\n\n    case actionTypes.REMOVE_ITEM:\n      state.ITEMS.map(item => {\n        if (item.id === payload.id) {\n          return false;\n        } else {\n          return true;\n        }\n      });\n\n    case actionTypes.SET_CART:\n      localStorage.removeItem('storeCart');\n      localStorage.setItem('storeCart', JSON.stringify(state.ITEMS));\n\n    case actionTypes.GET_CART:\n      let cart = localStorage.getItem('storeCart');\n\n      if (cart !== null) {\n        return { ...state,\n          ITEMS: JSON.parse(cart)\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/laragon/www/loja-bim/src/store/reducers/cart.reducer.js"],"names":["actionTypes","initialState","ITEMS","state","type","payload","ADD_ITEM","arr_items","items","findIndex","item","id","push","qtd","splice","REMOVE_ITEM","map","SET_CART","localStorage","removeItem","setItem","JSON","stringify","GET_CART","cart","getItem","parse"],"mappings":"AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;AAIA,gBAAe,CAACC,KAAK,GAAGF,YAAT,EAAuB;AAACG,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAvB,KAA2C;AACxD,UAAQD,IAAR;AAEE,SAAKJ,WAAW,CAACM,QAAjB;AACE,UAAIC,SAAS,GAAGJ,KAAK,CAACD,KAAtB;AACA,UAAIM,KAAK,GAAGL,KAAK,CAACD,KAAN,CAAYO,SAAZ,CAAuBC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWN,OAAO,CAACM,EAAlD,CAAZ;;AAEA,UAAGH,KAAK,GAAG,CAAX,EAAc;AACZD,QAAAA,SAAS,CAACK,IAAV,CAAe;AAACD,UAAAA,EAAE,EAAEN,OAAO,CAACM,EAAb;AAAiBE,UAAAA,GAAG,EAAER,OAAO,CAACQ;AAA9B,SAAf;AACD,OAFD,MAEO;AACLN,QAAAA,SAAS,CAACK,IAAV,CAAe;AAACD,UAAAA,EAAE,EAAEN,OAAO,CAACM,EAAb;AAAiBE,UAAAA,GAAG,EAAEV,KAAK,CAACD,KAAN,CAAYM,KAAZ,EAAmBK,GAAnB,GAAyB;AAA/C,SAAf;AACAN,QAAAA,SAAS,CAACO,MAAV,CAAiBN,KAAjB,EAAwB,CAAxB;AACD;;AAEA,aAAO,EAAC,GAAGL,KAAJ;AAAWD,QAAAA,KAAK,EAAGK;AAAnB,OAAP;;AAGH,SAAKP,WAAW,CAACe,WAAjB;AACEZ,MAAAA,KAAK,CAACD,KAAN,CAAYc,GAAZ,CAAkBN,IAAD,IAAU;AACzB,YAAIA,IAAI,CAACC,EAAL,KAAYN,OAAO,CAACM,EAAxB,EAA2B;AACzB,iBAAO,KAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF,OAND;;AAQF,SAAKX,WAAW,CAACiB,QAAjB;AACEC,MAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACAD,MAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAenB,KAAK,CAACD,KAArB,CAAlC;;AAEF,SAAKF,WAAW,CAACuB,QAAjB;AACE,UAAIC,IAAI,GAAGN,YAAY,CAACO,OAAb,CAAqB,WAArB,CAAX;;AACA,UAAID,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,EAAC,GAAGrB,KAAJ;AAAWD,UAAAA,KAAK,EAAEmB,IAAI,CAACK,KAAL,CAAWF,IAAX;AAAlB,SAAP;AACD;;AAGH;AACE,aAAOrB,KAAP;AArCJ;AAuCD,CAxCD","sourcesContent":["import { actionTypes } from '../actions/cart.action';\r\n\r\nconst initialState = {\r\n  ITEMS: []\r\n}\r\n\r\nexport default (state = initialState, {type, payload}) => {\r\n  switch (type){\r\n\r\n    case actionTypes.ADD_ITEM:\r\n      let arr_items = state.ITEMS;\r\n      let items = state.ITEMS.findIndex( item => item.id == payload.id );\r\n\r\n      if(items < 0) {\r\n        arr_items.push({id: payload.id, qtd: payload.qtd});\r\n      } else {\r\n        arr_items.push({id: payload.id, qtd: state.ITEMS[items].qtd + 1});\r\n        arr_items.splice(items, 1);\r\n      }\r\n\r\n       return {...state, ITEMS:  arr_items}\r\n    \r\n\r\n    case actionTypes.REMOVE_ITEM:\r\n      state.ITEMS.map( (item) => {\r\n        if (item.id === payload.id){\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n\r\n    case actionTypes.SET_CART:\r\n      localStorage.removeItem('storeCart');\r\n      localStorage.setItem('storeCart', JSON.stringify(state.ITEMS));\r\n\r\n    case actionTypes.GET_CART:\r\n      let cart = localStorage.getItem('storeCart');\r\n      if (cart !== null) {\r\n        return {...state, ITEMS: JSON.parse(cart)}\r\n      }\r\n      \r\n\r\n    default:\r\n      return state\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}