{"ast":null,"code":"import { Http } from '../../config/Http';\nimport { changeLoading } from './loading.action';\nimport { changeNotify } from './notify.action';\nconst dispatch = useDispatch();\nexport const actionTypes = {\n  CHANGE: 'CHANGE_AUTH',\n  SUCCESS: 'SUCCESS_AUTH'\n};\nexport const changeAuth = data => ({\n  type: actionTypes.CHANGE,\n  data\n});\nexport const successAuth = data => ({\n  type: actionTypes.SUCCESS,\n  data\n});\nexport const setUserToken = token => dispatch => {\n  localStorage.setItem('acess_token', token);\n  dispatch(changeAuth({\n    email: '',\n    password: ''\n  }));\n  dispatch(successAuth(true));\n};\nexport const login = credentials => dispatch => {\n  dispatch(changeLoading({\n    open: true,\n    msg: 'Autenticndo usuário...'\n  }));\n  return Http.post('/login', {\n    email: 'Jonathancmaia3@gmail.com',\n    password: '6fm8ghe6'\n  }).then(response => {\n    if (typeof response !== 'undefined') {\n      if (response.acess_token) {\n        dispatch(changeLoading({\n          open: false\n        }));\n        dispatch(setUserToken(response.acess_token));\n      }\n    }\n  }).catch(error => {\n    if (typeof error.response !== 'undefined') {\n      if (error.response.sttus === 401 || error.response.status === 400) {\n        dispatch(changeLoading({\n          open: false\n        }));\n        dispatch(changeNotify({\n          open: true,\n          clss: 'error',\n          msg: 'Email e/ou senha incorretos'\n        }));\n      }\n    } else {\n      dispatch(changeLoading({\n        open: false\n      }));\n      dispatch(changeNotify({\n        open: true,\n        clss: 'error',\n        msg: 'Erro o se conectar ao servidor'\n      }));\n    }\n  });\n};","map":{"version":3,"sources":["C:/laragon/www/loja-bim/src/store/actions/auth.action.js"],"names":["Http","changeLoading","changeNotify","dispatch","useDispatch","actionTypes","CHANGE","SUCCESS","changeAuth","data","type","successAuth","setUserToken","token","localStorage","setItem","email","password","login","credentials","open","msg","post","then","response","acess_token","catch","error","sttus","status","clss"],"mappings":"AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,MAAMC,QAAQ,GAAGC,WAAW,EAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,MAAM,EAAE,aADiB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAIC,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,WAAW,CAACC,MADiB;AAEnCG,EAAAA;AAFmC,CAAX,CAAnB;AAKP,OAAO,MAAME,WAAW,GAAIF,IAAD,KAAW;AACpCC,EAAAA,IAAI,EAAEL,WAAW,CAACE,OADkB;AAEpCE,EAAAA;AAFoC,CAAX,CAApB;AAKP,OAAO,MAAMG,YAAY,GAAGC,KAAK,IAAIV,QAAQ,IAAI;AAC/CW,EAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoCF,KAApC;AACAV,EAAAA,QAAQ,CAAEK,UAAU,CAAC;AACnBQ,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,QAAQ,EAAE;AAFS,GAAD,CAAZ,CAAR;AAKAd,EAAAA,QAAQ,CAAEQ,WAAW,CAAC,IAAD,CAAb,CAAR;AACD,CARM;AAUP,OAAO,MAAMO,KAAK,GAAGC,WAAW,IAAIhB,QAAQ,IAAI;AAE9CA,EAAAA,QAAQ,CAAEF,aAAa,CAAC;AACtBmB,IAAAA,IAAI,EAAE,IADgB;AAEtBC,IAAAA,GAAG,EAAE;AAFiB,GAAD,CAAf,CAAR;AAKA,SAAOrB,IAAI,CAACsB,IAAL,CAAU,QAAV,EAAoB;AACzBN,IAAAA,KAAK,EAAE,0BADkB;AAEzBC,IAAAA,QAAQ,EAAE;AAFe,GAApB,EAGJM,IAHI,CAGGC,QAAD,IAAY;AACnB,QAAI,OAAOA,QAAP,KAAoB,WAAxB,EAAoC;AAClC,UAAGA,QAAQ,CAACC,WAAZ,EAAwB;AACtBtB,QAAAA,QAAQ,CAAEF,aAAa,CAAC;AAAEmB,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAf,CAAR;AACAjB,QAAAA,QAAQ,CAAES,YAAY,CAACY,QAAQ,CAACC,WAAV,CAAd,CAAR;AACD;AACF;AACF,GAVM,EAUJC,KAVI,CAUEC,KAAK,IAAI;AAChB,QAAI,OAAOA,KAAK,CAACH,QAAb,KAA0B,WAA9B,EAA0C;AACxC,UAAIG,KAAK,CAACH,QAAN,CAAeI,KAAf,KAAyB,GAAzB,IAAgCD,KAAK,CAACH,QAAN,CAAeK,MAAf,KAA0B,GAA9D,EAAkE;AAChE1B,QAAAA,QAAQ,CAAEF,aAAa,CAAC;AAAEmB,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAf,CAAR;AACAjB,QAAAA,QAAQ,CAAED,YAAY,CAAC;AACrBkB,UAAAA,IAAI,EAAE,IADe;AAErBU,UAAAA,IAAI,EAAE,OAFe;AAGrBT,UAAAA,GAAG,EAAE;AAHgB,SAAD,CAAd,CAAR;AAKD;AACF,KATD,MASO;AACLlB,MAAAA,QAAQ,CAAEF,aAAa,CAAC;AAAEmB,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAf,CAAR;AACEjB,MAAAA,QAAQ,CAAED,YAAY,CAAC;AACrBkB,QAAAA,IAAI,EAAE,IADe;AAErBU,QAAAA,IAAI,EAAE,OAFe;AAGrBT,QAAAA,GAAG,EAAE;AAHgB,OAAD,CAAd,CAAR;AAKH;AACF,GA5BM,CAAP;AA6BD,CApCM","sourcesContent":["import { Http } from '../../config/Http';\r\nimport { changeLoading } from './loading.action';\r\nimport { changeNotify } from './notify.action';\r\n\r\nconst dispatch = useDispatch();\r\n\r\nexport const actionTypes = {\r\n  CHANGE: 'CHANGE_AUTH',\r\n  SUCCESS: 'SUCCESS_AUTH'\r\n}\r\n\r\nexport const changeAuth = (data) => ({\r\n  type: actionTypes.CHANGE,\r\n  data,\r\n})\r\n\r\nexport const successAuth = (data) => ({\r\n  type: actionTypes.SUCCESS,\r\n  data\r\n})\r\n\r\nexport const setUserToken = token => dispatch => {\r\n  localStorage.setItem('acess_token', token);\r\n  dispatch( changeAuth({\r\n    email: '',\r\n    password: ''\r\n  }))\r\n\r\n  dispatch( successAuth(true));\r\n}\r\n\r\nexport const login = credentials => dispatch => {\r\n  \r\n  dispatch( changeLoading({\r\n    open: true,\r\n    msg: 'Autenticndo usuário...'\r\n  }));\r\n\r\n  return Http.post('/login', {\r\n    email: 'Jonathancmaia3@gmail.com',\r\n    password: '6fm8ghe6'\r\n  }).then( (response)=>{\r\n    if (typeof response !== 'undefined'){\r\n      if(response.acess_token){\r\n        dispatch( changeLoading({ open: false }));\r\n        dispatch( setUserToken(response.acess_token));\r\n      }\r\n    }\r\n  }).catch(error => {\r\n    if (typeof error.response !== 'undefined'){\r\n      if (error.response.sttus === 401 || error.response.status === 400){\r\n        dispatch( changeLoading({ open: false }));\r\n        dispatch( changeNotify({\r\n          open: true,\r\n          clss: 'error',\r\n          msg: 'Email e/ou senha incorretos'\r\n        }));\r\n      }\r\n    } else {\r\n      dispatch( changeLoading({ open: false }));\r\n        dispatch( changeNotify({\r\n          open: true,\r\n          clss: 'error',\r\n          msg: 'Erro o se conectar ao servidor'\r\n        }));\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}